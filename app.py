import os
import psycopg2
from flask import Flask, request, jsonify, render_template
import telebot
import g4f

# ========== –ö–æ–Ω—Ñ–∏–≥ ==========
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL_BASE = os.getenv("WEBHOOK_URL_BASE")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://your-service.onrender.com
WEBHOOK_URL_PATH = f"/{TOKEN}/" if TOKEN else None

# –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ —á–µ—Ä–µ–∑ env, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è URL, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ä–∞–Ω–µ–µ —É–∫–∞–∑–∞–ª.
DATABASE_URL = os.getenv(
    "DATABASE_URL",
    "postgresql://gpt_ai_db_user:K7xIvBXQqK0zzx0P4kkBG7amH2zviyD5@dpg-d2ceo7vdiees73fjvkp0-a/gpt_ai_db"
)

MAX_HISTORY_LENGTH = int(os.getenv("MAX_HISTORY_LENGTH", 20))
DEFAULT_MODEL = os.getenv("DEFAULT_MODEL", "gpt-4")

if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not WEBHOOK_URL_BASE:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω WEBHOOK_URL_BASE –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not DATABASE_URL:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ fallback —Ç–æ–∂–µ –ø—É—Å—Ç)")

# ========== Init ==========
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__, template_folder="templates", static_folder="static")

# ========== DB helpers ==========
def get_db_conn():
    # –î–ª—è Render/Managed PG –∏—Å–ø–æ–ª—å–∑—É–µ–º sslmode=require
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def init_db():
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS history (
                    id SERIAL PRIMARY KEY,
                    chat_id TEXT,
                    role TEXT,
                    content TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            conn.commit()

def get_history(chat_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_HISTORY_LENGTH —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ {'role':..., 'content':...'}
    –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º).
    """
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT role, content FROM history
                WHERE chat_id = %s
                ORDER BY timestamp DESC
                LIMIT %s
            """, (str(chat_id), MAX_HISTORY_LENGTH))
            rows = cur.fetchall()
    # rows —Å–µ–π—á–∞—Å –≤ –ø–æ—Ä—è–¥–∫–µ newest->oldest, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
    rows.reverse()
    return [{"role": row[0], "content": row[1]} for row in rows]

def append_history(chat_id, role, content):
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO history (chat_id, role, content)
                VALUES (%s, %s, %s)
            """, (str(chat_id), role, content))
            conn.commit()

def reset_history(chat_id):
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM history WHERE chat_id = %s", (str(chat_id),))
            conn.commit()

def get_stats(chat_id):
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT COUNT(*) FROM history WHERE chat_id = %s", (str(chat_id),))
            count = cur.fetchone()[0]
    return count

init_db()

# ========== Telegram bot handlers ==========
@bot.message_handler(commands=['start'])
def start(message):
    reset_history(message.chat.id)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ GPT. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –æ—Ç–≤–µ—á—É.\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help")

@bot.message_handler(commands=['help'])
def help_cmd(message):
    help_text = (
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "/price ‚Äî —Ü–µ–Ω–∞\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['reset'])
def reset_cmd(message):
    reset_history(message.chat.id)
    bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞.")

@bot.message_handler(commands=['info'])
def info_cmd(message):
    info_text = (
        "–Ø GPT-–±–æ—Ç. –°–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ PostgreSQL.\n"
        "–ú–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ :)"
    )
    bot.send_message(message.chat.id, info_text)

@bot.message_handler(commands=['price'])
def price_cmd(message):
    bot.send_message(message.chat.id, "üí∏ FREE ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ")

@bot.message_handler(commands=['stats'])
def stats_cmd(message):
    cnt = get_stats(message.chat.id)
    bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: {cnt}")

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text or ""
    append_history(chat_id, "user", text)
    try:
        bot.send_chat_action(chat_id, 'typing')
    except Exception:
        pass

    try:
        history = get_history(chat_id)
        # g4f API: –∏—Å–ø–æ–ª—å–∑—É–µ–º messages —Ñ–æ—Ä–º–∞—Ç
        response = g4f.ChatCompletion.create(
            model=DEFAULT_MODEL,
            messages=history
        )
    except Exception as e:
        response = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–æ–¥–µ–ª–∏: {e}"

    append_history(chat_id, "assistant", response)
    bot.send_message(chat_id, response)

# ========== Web App (frontend) ==========
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/api/chat", methods=["POST"])
def web_chat():
    data = request.get_json(force=True)
    user_msg = data.get("message", "").strip()
    if not user_msg:
        return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id "webapp" (–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π per-user –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å)
    chat_id = "webapp"
    append_history(chat_id, "user", user_msg)

    try:
        history = get_history(chat_id)
        response = g4f.ChatCompletion.create(
            model=DEFAULT_MODEL,
            messages=history
        )
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–æ–¥–µ–ª–∏: {e}"}), 500

    append_history(chat_id, "assistant", response)
    return jsonify({"response": response})

# ========== Webhook endpoint (Telegram -> Flask) ==========
@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    # Telebot expects a JSON update
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '', 200

# ========== –ó–∞–ø—É—Å–∫ ========== 
if __name__ == "__main__":
    # –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH)
    port = int(os.environ.get('PORT', 5000))
    app.run(host="0.0.0.0", port=port)
